plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.18'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.github.node-gradle.node' version '7.0.1'
}

group = 'com.fscom'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

/**
 * node 환경이 로컬에 다운로드되어 gradle 과 통합됩니다.
 */
node {
	download = true
	version = '18.17.1'
	npmVersion = '10.2.5'
	nodeProjectDir = file("${projectDir}/src/main/resources/fs")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
	implementation 'org.slf4j:slf4j-api:1.7.36'
	implementation 'net.nurigo:sdk:4.2.4'
	implementation 'ch.qos.logback:logback-classic'
	implementation 'org.springframework.boot:spring-boot-tools:2.2.13.RELEASE'
	 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'commons-codec:commons-codec:1.14'
	implementation 'com.squareup.okhttp3:okhttp:4.9.3'
	implementation 'org.json:json:20230618'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
	implementation 'net.minidev:json-smart'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('copyStaticResources', Copy) {
	def cssLib = new File(rootDir, "src/main/resources/fs")
	from "$cssLib/**"
	into "$projectDir/build/resources/main"
}

tasks.register('tailwindBuild', NpmTask) {
	args = ["run", "build"]
	dependsOn tasks.npmInstall
}

tasks.register('jsBundle', NpmTask) {
	args = ["run", "bundle"]
	dependsOn tasks.npmInstall
}

tasks.processResources {
	dependsOn(tailwindBuild)
	dependsOn(jsBundle)
	dependsOn(copyStaticResources)
}

bootRun {
	doFirst {
		println("bootRun!")
		dependsOn(tasks.copyTailwindBuild)
	}
}

sourceSets {
	main {
		output.dir(copyStaticResources.destinationDir, builtBy: copyStaticResources)
	}
}
